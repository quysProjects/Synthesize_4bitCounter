
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: May 26 2024 11:47:50

// Verification Directory fv/synth_wrapper 

module fulladder(X, Y, Ci, S, Co);
  input X, Y, Ci;
  output S, Co;
  wire X, Y, Ci;
  wire S, Co;
  wire w1, w2, w3;
  xor G1 (w1, X, Y);
  xor G2 (S, w1, Ci);
  and G3 (w2, w1, Ci);
  and G4 (w3, X, Y);
  or G5 (Co, w2, w3);
endmodule

module ripple_adder(X, Y, S, Co, Cin);
  input [3:0] X, Y;
  input Cin;
  output [3:0] S;
  output Co;
  wire [3:0] X, Y;
  wire Cin;
  wire [3:0] S;
  wire Co;
  wire w1, w2, w3;
  fulladder u1(X[0], Y[0], Cin, S[0], w1);
  fulladder u2(X[1], Y[1], w1, S[1], w2);
  fulladder u3(X[2], Y[2], w2, S[2], w3);
  fulladder u4(X[3], Y[3], w3, S[3], Co);
endmodule

module mux2by1(D0, D1, S, Y);
  input D0, D1, S;
  output Y;
  wire D0, D1, S;
  wire Y;
  wire w1, w2, w3;
  not g1 (w1, S);
  and g2 (w2, D0, w1);
  and g3 (w3, D1, S);
  or g4 (Y, w2, w3);
endmodule

module mux2by1_4bit(in0, in1, sel, out);
  input [3:0] in0, in1;
  input sel;
  output [3:0] out;
  wire [3:0] in0, in1;
  wire sel;
  wire [3:0] out;
  mux2by1 mux0(in0[0], in1[0], sel, out[0]);
  mux2by1 mux1(in0[1], in1[1], sel, out[1]);
  mux2by1 mux2(in0[2], in1[2], sel, out[2]);
  mux2by1 mux3(in0[3], in1[3], sel, out[3]);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl;
  input [3:0] in_0, in_1;
  output [3:0] z;
  wire ctl;
  wire [3:0] in_0, in_1;
  wire [3:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module counter(clk_i, rst_ni, sel_i, data_o);
  input clk_i, rst_ni, sel_i;
  output [3:0] data_o;
  wire clk_i, rst_ni, sel_i;
  wire [3:0] data_o;
  wire [3:0] counter_up;
  wire [3:0] counter_down;
  wire [3:0] counter_d;
  wire UNCONNECTED, UNCONNECTED0, UNCONNECTED1, UNCONNECTED2,
       UNCONNECTED3, UNCONNECTED4, n_15;
  ripple_adder count_up(.X (data_o), .Y (4'b0000), .S (counter_up), .Co
       (UNCONNECTED), .Cin (1'b1));
  ripple_adder count_down(.X (data_o), .Y (4'b1111), .S (counter_down),
       .Co (UNCONNECTED0), .Cin (1'b0));
  mux2by1_4bit mux(counter_down, counter_up, sel_i, counter_d);
  bmux mux_counter_q_32_9(.ctl (n_15), .in_0 (counter_d), .in_1
       (4'b0000), .z ({UNCONNECTED4, UNCONNECTED3, UNCONNECTED2,
       UNCONNECTED1}));
  not g1 (n_15, rst_ni);
  CDN_flop \counter_q_reg[0] (.clk (clk_i), .d (counter_d[0]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q
       (data_o[0]));
  CDN_flop \counter_q_reg[1] (.clk (clk_i), .d (counter_d[1]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q
       (data_o[1]));
  CDN_flop \counter_q_reg[2] (.clk (clk_i), .d (counter_d[2]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q
       (data_o[2]));
  CDN_flop \counter_q_reg[3] (.clk (clk_i), .d (counter_d[3]), .sena
       (1'b1), .aclr (1'b0), .apre (1'b0), .srl (n_15), .srd (1'b0), .q
       (data_o[3]));
endmodule

module bmux_1(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module synth_wrapper(sel_i, rst_n, clk, data_o);
  input sel_i, rst_n, clk;
  output [3:0] data_o;
  wire sel_i, rst_n, clk;
  wire [3:0] data_o;
  wire UNCONNECTED5, UNCONNECTED6, UNCONNECTED7, UNCONNECTED8,
       UNCONNECTED9, \data_o_reg[0]_14 , \data_o_reg[1]_15 ,
       \data_o_reg[2]_16 ;
  wire \data_o_reg[3]_17 , n_6, sel_i_reg;
  counter u1(.clk_i (clk), .rst_ni (rst_n), .sel_i (sel_i_reg), .data_o
       ({\data_o_reg[3]_17 , \data_o_reg[2]_16 , \data_o_reg[1]_15 ,
       \data_o_reg[0]_14 }));
  bmux_1 mux_sel_i_reg_12_8(.ctl (n_6), .in_0 (sel_i), .in_1 (1'b0), .z
       (UNCONNECTED5));
  bmux mux_data_o_12_8(.ctl (n_6), .in_0 ({\data_o_reg[3]_17 ,
       \data_o_reg[2]_16 , \data_o_reg[1]_15 , \data_o_reg[0]_14 }),
       .in_1 (4'b0000), .z ({UNCONNECTED9, UNCONNECTED8, UNCONNECTED7,
       UNCONNECTED6}));
  not g1 (n_6, rst_n);
  CDN_flop \data_o_reg[0] (.clk (clk), .d (\data_o_reg[0]_14 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (data_o[0]));
  CDN_flop \data_o_reg[1] (.clk (clk), .d (\data_o_reg[1]_15 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (data_o[1]));
  CDN_flop \data_o_reg[2] (.clk (clk), .d (\data_o_reg[2]_16 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (data_o[2]));
  CDN_flop \data_o_reg[3] (.clk (clk), .d (\data_o_reg[3]_17 ), .sena
       (1'b1), .aclr (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (data_o[3]));
  CDN_flop sel_i_reg_reg(.clk (clk), .d (sel_i), .sena (1'b1), .aclr
       (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (sel_i_reg));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
